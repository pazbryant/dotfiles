#!/usr/bin/env sh

set -x
set -e

# Default directory for storing screenshots
dir="$HOME/Pictures/screenshots"
time=$(date +%Y-%m-%d-%H-%M-%S)
file="$dir/Screenshot_$time.png"

# Display help message
show_help() {
  echo "Dependencies:
    grim slurp wl-clipboard
Options:
    -m    Mode to take the screenshot (full|select)
    -s    Way to store the screenshot (clip|save|clip&save)"
}

# Parse command-line options
while getopts "m:s:" opt; do
  echo opt
  case "$opt" in
  m) mode="$OPTARG" ;;  # `full`, `select`
  s) store="$OPTARG" ;; # `clip`, `save`, or `clip&save`
  *)
    show_help
    exit 1
    ;;
  esac
done

# Show help if requested
if [ -z "$mode" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  show_help
  exit 0
fi

# Set default values if not provided
mode="${mode:-full}"
store="${store:-clip&save}"

# Create the directory if it doesn't exist
mkdir -p "$dir" || {
  echo "Error: Failed to create directory $dir"
  exit 1
}

# Build the maim command
command="grim -l 9"
case "$mode" in
select) command="$command -g '$(slurp)'" ;;
full) ;; # No additional options needed for full screenshot
*)
  echo "Invalid mode: $mode. Valid modes are 'full' or 'select'."
  show_help
  exit 1
  ;;
esac
command="$command \"$file\""

# Execute the screenshot command
if eval "$command"; then
  notify-send -a "sshot" -u normal -i "camera" "Screenshot Successfully"
else
  echo "Error: Failed to take screenshot with command: $command" >&2
  notify-send -a "sshot" -u normal -i "camera" "Screenshot Failed"
  exit 1
fi

# Handle storage options
if [ "$store" = "clip" ] || [ "$store" = "clip&save" ]; then
  wl-copy <"$file" # Copy to clipboard
  if [ "$store" = "clip" ]; then
    rm "$file" # Remove file after copying if only 'clip' is selected
  fi
fi

exit 0
