# set mouse mode on
set -g mouse on

# set focus event (nvim)
set-option -g focus-events on

# disable status bar at start
set -g status off
bind-key b set-option status

# set copy mode
set-window-option -g mode-keys vi

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# delay after prefix
set -sg escape-time 0

# set true colors compatibility
set -g default-terminal "tmux-256color"
set -sa terminal-overrides ',*:RGB'

# create new window current path
bind-key c new-window -c "#{pane_current_path}"

# split vertical panel in current path
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -c "#{pane_current_path}"

# display panel numbers time
set -g display-panes-time 10000

# remove kill panel confirmation 
unbind-key x
bind-key x kill-pane

# remove kill session confirmation
bind-key X kill-session

# base index
set -g base-index 1

# panel border type
set -g pane-border-lines simple

# terminal history limit
set-option -g history-limit 5000

# bspwm layout switching
bind-key 1 select-layout even-horizontal
bind-key 2 select-layout even-vertical
bind-key 3 select-layout main-horizontal
bind-key 4 select-layout main-vertical
bind-key 5 select-layout tiled

# Resize pane by 1 cell
bind-key -r j resize-pane -D
bind-key -r k resize-pane -U 
bind-key -r h resize-pane -L 
bind-key -r l resize-pane -R 

# yazi configuration
set -g allow-passthrough on
set -ga update-environment TERM


# Open todo
bind -r T neww -c "#{pane_current_path}" \
"[[ -e Todo.md ]] && nvim todo.md || \
(cd ~/documents/github/notes && nvim  '200 Permanent notes'/Todo.md)"

bind-key K run-shell ~/bin/tmux/kill-sessions
bind-key k run-shell ~/bin/tmux/kill-windows

bind-key D run-shell "\
~/bin/tmux/new-session /home/bryant/documents/github/dotfiles/"

bind-key G run-shell "\
~/bin/tmux/new-session /home/bryant/documents/github/"

bind-key H run-shell "~/bin/tmux/new-session /home/bryant/"

bind-key N run-shell "~/bin/tmux/new-session \
/home/bryant/documents/github/codeeditors/nvim/"

bind-key F run-shell "tmux neww ~/bin/tmux/new-session"

bind-key S run-shell "tmux neww ~/bin/tmux/select-session"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-\' select-pane -l

# reload tmux configuration
bind r source-file ~/.tmux.conf \; display-message "tmux reloaded."
