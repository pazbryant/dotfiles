#!/bin/sh

DIR="$HOME/.config/dunst/icons"
SINK="@DEFAULT_AUDIO_SINK@"

# Get current volume percentage
get_volume() {
  wpctl get-volume "$SINK" | awk '{print $2}' | tr -d '%'
}

# Check if the audio is muted
is_mute() {
  wpctl get-volume "$SINK" | grep -q 'muted: yes'
}

# Send a notification based on the current volume and mute status
send_notification() {
  volume=$(get_volume)

  if is_mute; then
    icon_name="$DIR/notification-audio-volume-muted.svg"
    dunstify "Muted" -i "$icon_name" -t 1000 -r 5555 -u low -h string:synchronous:audio-volume
  else
    if [ "$volume" = "0" ]; then
      icon_name="$DIR/notification-audio-volume-muted.svg"
    elif [ "$volume" -lt "30" ]; then
      icon_name="$DIR/notification-audio-volume-low.svg"
    elif [ "$volume" -lt "70" ]; then
      icon_name="$DIR/notification-audio-volume-medium.svg"
    else
      icon_name="$DIR/notification-audio-volume-high.svg"
    fi
    dunstify "$volume%  " -i "$icon_name" -t 1000 -r 5555 -u low -h int:value:"$volume"
  fi
}

# Increase volume by 2%
increase_volume() {
  wpctl set-volume "$SINK" +2% >/dev/null
}

# Decrease volume by 2%
decrease_volume() {
  wpctl set-volume "$SINK" -2% >/dev/null
}

# Toggle mute state
toggle_mute() {
  wpctl set-mute "$SINK" toggle >/dev/null
}

# Unmute if muted
unmute() {
  wpctl set-mute "$SINK" false >/dev/null
}

# Main control logic
case "$1" in
up)
  unmute
  increase_volume
  ;;
down)
  unmute
  decrease_volume
  ;;
mute)
  toggle_mute
  ;;
*)
  echo "Usage: $0 {up|down|mute}"
  exit 1
  ;;
esac

# Send a notification after performing the action
send_notification
